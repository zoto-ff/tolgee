/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot' apply false
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id "kotlin-jpa"
    id "org.jetbrains.kotlin.kapt"
    id "kotlin-allopen"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-kapt"

repositories {
    mavenCentral()
    jcenter()
}

kotlin {
    jvmToolchain(17)
}

idea {
    module {
        generatedSourceDirs += files('build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main')
    }
}

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
    annotation("jakarta.persistence.Embeddable")
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.beans.factory.annotation.Configurable")
}

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation('org.springframework.boot:spring-boot-starter-test') {
    }
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    api "org.springframework.boot:spring-boot-starter-actuator"

    /**
     * Testing
     */
    implementation libs.assertJCore
    implementation libs.springmockk
    implementation libs.mockito
    implementation libs.jsonUnitAssert

    /**
     * Kotlin
     */
    implementation libs.kotlinReflect

    /**
     * MISC
     */
    implementation libs.commonsCodec
    implementation libs.amazonS3
    implementation libs.icu4j
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.jacksonModuleKotlin
    implementation libs.kotlinCoroutines

    /**
     * DATA MODULE
     */
    implementation(project(':data'))


    /**
     * MISC
     */
    implementation(project(':misc'))
    implementation 'org.postgresql:postgresql'
}

test {
    useJUnitPlatform()
    maxHeapSize = "4096m"
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
